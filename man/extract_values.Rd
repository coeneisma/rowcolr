% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_values.R
\name{extract_values}
\alias{extract_values}
\title{Extract Values from an Excel File Based on Row and Column Identifiers}
\usage{
extract_values(
  file,
  row_pattern = NULL,
  col_pattern = NULL,
  row_identifiers = NULL,
  col_identifiers = NULL,
  clean_description = TRUE,
  fuzzy_threshold = NULL,
  fuzzy_method = "jw"
)
}
\arguments{
\item{file}{Path to the Excel file.}

\item{row_pattern}{A regex pattern to identify row labels. \strong{Used only if \code{row_identifiers} does not fully capture all row labels}. (Example: \code{".*_row$"}).}

\item{col_pattern}{A regex pattern to identify column labels. \strong{Used only if \code{col_identifiers} does not fully capture all column labels}. (Example: \code{".*_col$"}).}

\item{row_identifiers}{A character vector of row label identifiers. If
provided, takes precedence over \code{row_pattern}, but \strong{does not disable it}.}

\item{col_identifiers}{A character vector of column label identifiers. If
provided, takes precedence over \code{col_pattern}, but \strong{does not disable it}.}

\item{clean_description}{Logical. If TRUE, removes text matching
\code{row_pattern} and \code{col_pattern} from row and column labels (default: TRUE).}

\item{fuzzy_threshold}{Numeric between 0 and 1. If set, enables fuzzy matching
for identifiers. 0 = exact match required, 1 = any match accepted.
Recommended: 0.8 (default: NULL, disabled).}

\item{fuzzy_method}{Character. Method for fuzzy matching from stringdist
package: "osa", "lv", "dl", "jaccard", "jw" (default: "jw" for
Jaro-Winkler).}
}
\value{
A tibble containing extracted values with the following columns:
\itemize{
\item filename: Name of the source Excel file
\item sheet: Sheet name where the value was found
\item row, col: Row and column coordinates of the value
\item row_label, col_label: The matched row and column labels
\item description: Combined row and column label
\item data_type: Excel data type of the cell
\item error, logical, numeric, date, character: Cell values by type
\item fuzzy_threshold: The fuzzy matching threshold used (if any)
\item row_similarity: Similarity score for row label match (0-1)
\item col_similarity: Similarity score for column label match (0-1)
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This function reads an Excel file and extracts structured data by
identifying row and column labels. It ensures that each row label is only
matched with the closest column label to its right and only with column
labels from the nearest preceding row that contains column headers.

You can use \strong{both regex patterns and explicit identifiers together}.
\itemize{
\item If \code{row_identifiers} and/or \code{col_identifiers} are provided, they take \strong{priority} over \code{row_pattern} and \code{col_pattern}.
\item If \strong{both} explicit identifiers and regex patterns are provided, the function will \strong{first} match on identifiers. Any additional matches from regex patterns will be included.
}
}
\examples{
# Extract values using regex patterns
dataset <- extract_values(rowcolr_example("example.xlsx"), row_pattern = ".*_row$", col_pattern = ".*_col$")
dataset

# Extract values using a predefined list of labels (ignoring regex)
dataset <- extract_values(rowcolr_example("example.xlsx"),
                          row_identifiers = c("Total assets (4+9)", "Total equity (10+11+12)"),
                          col_identifiers = c("2025_col"))
dataset

# Extract values using BOTH identifiers and regex
dataset <- extract_values(rowcolr_example("example.xlsx"),
                          row_identifiers = c("Total assets (4+9)"),
                          row_pattern = ".*_row$")
dataset

# Extract values with fuzzy matching enabled
dataset <- extract_values(rowcolr_example("example.xlsx"),
                          row_identifiers = c("Total assets", "Total equity"),
                          col_identifiers = c("2025"),
                          fuzzy_threshold = 0.8)
dataset
}
