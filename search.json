[{"path":"https://coeneisma.github.io/rowcolr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rowcolr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"rowcolr","text":"primary function rowcolr extract_values(), extracts structured data Excel files identifying row column labels. function works drawing horizontal line detected row label vertical line detected column label. value intersection extracted stored. rowcolr leverages excellent tidyxl package read data Excel files, ensuring robust reliable extraction cell contents. package particularly useful dealing semi-structured data Excel files, can difficult process using existing packages. package can loaded :","code":"library(rowcolr)"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"example-extracting-data-from-an-excel-file","dir":"Articles","previous_headings":"Usage","what":"Example: Extracting Data from an Excel File","title":"rowcolr","text":"Values can extracted Excel file using default row column regex patterns .*_row$ .*_col$, means function looks values end _row _col: search rows contain fixed assets can use following code: Notice use default pattern .*_col$ column labels.","code":"# Extract values from an example Excel file dataset <- extract_values(rowcolr_example(\"example.xlsx\"))  head(dataset |>         dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label            col_label description     data_type error logical numeric #>   <chr>                <chr>     <chr>           <chr>     <chr> <lgl>     <dbl> #> 1 name_row             value_col name_value      character NA    NA      NA      #> 2 year_row             value_col year_value      numeric   NA    NA       2.03e3 #> 3 kvk_row              value_col kvk_value       numeric   NA    NA       1.23e7 #> 4 test1_row            2026_col  test1_2026      character NA    NA      NA      #> 5 tes2_row             2026_col  tes2_2026       character NA    NA      NA      #> 6 int_fixed_assets_row 2025_col  int_fixed_asse… numeric   NA    NA       1   e5 #> # ℹ 2 more variables: date <dttm>, character <chr> dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            pattern_row = \"fixed assets\")  head(dataset |>         dplyr::select(-c(filename, sheet, row, col, description))) #> # A tibble: 4 × 8 #>   row_label        col_label data_type error logical numeric date   #>   <chr>            <chr>     <chr>     <chr> <lgl>     <dbl> <dttm> #> 1 Intangible fixe… 2025_col  numeric   NA    NA       100000 NA     #> 2 Tangible fixed … 2025_col  numeric   NA    NA       200000 NA     #> 3 Financial fixed… 2025_col  numeric   NA    NA       150000 NA     #> 4 Total fixed ass… 2025_col  numeric   NA    NA       450000 NA     #> # ℹ 1 more variable: character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"example-using-specific-row-and-column-identifiers","dir":"Articles","previous_headings":"Usage","what":"Example: Using Specific Row and Column Identifiers","title":"rowcolr","text":"predefined row column labels, can use directly providing character vector. vectors can used col_identifiers row_identifiers arguments:","code":"data(\"row_identifiers_example\") row_identifiers_example #>  [1] \"int_fixed_assets_row\"            \"tang_fixed_assets_row\"           #>  [3] \"fin_fixed_assets_row\"            \"tot_fixed_assets_row\"            #>  [5] \"stock_row\"                       \"receivables_row\"                 #>  [7] \"securites_row\"                   \"cash_row\"                        #>  [9] \"tot_cur_assets_row\"              \"tot_assets_row\"                  #> [11] \"gen_reserve_row\"                 \"designated_reserves_row\"         #> [13] \"designated_funds_row\"            \"total_equity_row\"                #> [15] \"purchase_fund_row\"               \"major_maint_row\"                 #> [17] \"other_prov_row\"                  \"tot_prov_row\"                    #> [19] \"long_term_liabilities_row\"       \"total_long_term_liabilities_row\" #> [21] \"cur_liabilities_row\"             \"tot_cur_liabilities_row\"         #> [23] \"total_liabilities_row\" data(\"col_identifiers_example\") col_identifiers_example #> [1] \"2025_col\" dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            col_identifiers = col_identifiers_example,                           row_identifiers = row_identifiers_example)  head(dataset |>         dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label             col_label description    data_type error logical numeric #>   <chr>                 <chr>     <chr>          <chr>     <chr> <lgl>     <dbl> #> 1 int_fixed_assets_row  2025_col  int_fixed_ass… numeric   NA    NA       100000 #> 2 tang_fixed_assets_row 2025_col  tang_fixed_as… numeric   NA    NA       200000 #> 3 fin_fixed_assets_row  2025_col  fin_fixed_ass… numeric   NA    NA       150000 #> 4 tot_fixed_assets_row  2025_col  tot_fixed_ass… numeric   NA    NA       450000 #> 5 stock_row             2025_col  stock_2025     numeric   NA    NA        25000 #> 6 receivables_row       2025_col  receivables_2… numeric   NA    NA        15000 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"example-controlling-description-cleaning","dir":"Articles","previous_headings":"Usage","what":"Example: Controlling Description Cleaning","title":"rowcolr","text":"default, row column labels cleaned removing row column patterns combining description. disable , use clean_description = FALSE:","code":"dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            clean_description = FALSE)  head(dataset |>         dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label            col_label description     data_type error logical numeric #>   <chr>                <chr>     <chr>           <chr>     <chr> <lgl>     <dbl> #> 1 name_row             value_col name_row_value… character NA    NA      NA      #> 2 year_row             value_col year_row_value… numeric   NA    NA       2.03e3 #> 3 kvk_row              value_col kvk_row_value_… numeric   NA    NA       1.23e7 #> 4 test1_row            2026_col  test1_row_2026… character NA    NA      NA      #> 5 tes2_row             2026_col  tes2_row_2026_… character NA    NA      NA      #> 6 int_fixed_assets_row 2025_col  int_fixed_asse… numeric   NA    NA       1   e5 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"rowcolr","text":"rowcolr package powerful tool extracting structured data Excel files based customizable row column patterns. designed flexible, allowing regex-based matching predefined lists identifiers.","code":""},{"path":"https://coeneisma.github.io/rowcolr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Coen Eisma. Author, maintainer.","code":""},{"path":"https://coeneisma.github.io/rowcolr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eisma C (2025). rowcolr: Extract Structured Data Excel Using Row Column Identifiers. R package version 0.0.0.9003, https://github.com/coeneisma/rowcolr, https://coeneisma.github.io/rowcolr/.","code":"@Manual{,   title = {rowcolr: Extract Structured Data from Excel Using Row and Column Identifiers},   author = {Coen Eisma},   year = {2025},   note = {R package version 0.0.0.9003, https://github.com/coeneisma/rowcolr},   url = {https://coeneisma.github.io/rowcolr/}, }"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"rowcolr","dir":"","previous_headings":"","what":"Extract Structured Data from Excel Using Row and Column Identifiers","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"goal rowcolr extract structured data Excel files identifying row column labels using regex patterns predefined identifiers. package designed facilitate easy extraction data locating values intersection row column labels, making data wrangling cleaning efficient. rowcolr leverages excellent tidyxl package read data Excel files, ensuring robust reliable extraction cell contents. package particularly useful dealing semi-structured data Excel files, can difficult process using existing packages.","code":""},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"origin","dir":"","previous_headings":"","what":"Origin","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"development rowcolr driven specific use case: existing Excel files used input forms organizations arts culture sector provide information Dutch Ministry Education, Culture, Science (OCW). minimize disruptions existing workflow, forms kept similar possible original format still allowing structured extraction relevant data Excel files.","code":""},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"can install development version rowcolr GitHub :","code":"devtools::install_github(\"coeneisma/rowcolr\")"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"primary function rowcolr extract_values(), allows extract structured data Excel files identifying row column labels. function works drawing horizontal line detected row label vertical line detected column label. value located intersection extracted stored. package can loaded :","code":"library(rowcolr)"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"example-extracting-data-from-an-excel-file","dir":"","previous_headings":"Usage","what":"Example: Extracting Data from an Excel File","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"Values can extracted Excel file using default row column regex patterns .*_row$ .*_col$: details using package, refer vignette: vignette(\"rowcolr\").","code":"# Extract values from an example Excel file dataset <- extract_values(rowcolr_example(\"example.xlsx\"))  head(dataset |>         dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label             col_label description    data_type error logical numeric #>   <chr>                 <chr>     <chr>          <chr>     <chr> <lgl>     <dbl> #> 1 int_fixed_assets_row  2025_col  int_fixed_ass… numeric   <NA>  NA       100000 #> 2 tang_fixed_assets_row 2025_col  tang_fixed_as… numeric   <NA>  NA       200000 #> 3 fin_fixed_assets_row  2025_col  fin_fixed_ass… numeric   <NA>  NA       150000 #> 4 tot_fixed_assets_row  2025_col  tot_fixed_ass… numeric   <NA>  NA       450000 #> 5 stock_row             2025_col  stock_2025     numeric   <NA>  NA        25000 #> 6 receivables_row       2025_col  receivables_2… numeric   <NA>  NA        15000 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/reference/col_identifiers_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Column Identifiers — col_identifiers_example","title":"Example Column Identifiers — col_identifiers_example","text":"character vector example column identifiers used rowcolr package.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/col_identifiers_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Column Identifiers — col_identifiers_example","text":"","code":"col_identifiers_example"},{"path":"https://coeneisma.github.io/rowcolr/reference/col_identifiers_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Column Identifiers — col_identifiers_example","text":"character vector 1 element.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/col_identifiers_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Column Identifiers — col_identifiers_example","text":"","code":"col_identifiers_example #> [1] \"2025_col\""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"function reads Excel file extracts structured data identifying row column labels. ensures row label matched closest column label right column labels nearest preceding row contains column headers.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"","code":"extract_values(   file,   pattern_row = \".*_row$\",   pattern_col = \".*_col$\",   row_identifiers = NULL,   col_identifiers = NULL,   clean_description = TRUE )"},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"file Path Excel file. pattern_row regex pattern identify row labels (default: \".*_row$\"). pattern_col regex pattern identify column labels (default: \".*_col$\"). row_identifiers character vector row label identifiers (default: NULL). col_identifiers character vector column label identifiers (default: NULL). clean_description Logical. TRUE, removes text matching pattern_row pattern_col row column labels (default: TRUE).","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"tibble containing extracted values, including sheet name, row, column, description.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"","code":"# Extract values using regex patterns dataset <- extract_values(rowcolr_example(\"example.xlsx\"))  # Extract values using a predefined list of labels dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                           row_identifiers = c(\"Total Assets\", \"Total Liabilities\"),                           col_identifiers = c(\"Year 2023\", \"Year 2024\")) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `closest_col = min(...)`. #> Caused by warning in `min()`: #> ! no non-missing arguments to min; returning Inf"},{"path":"https://coeneisma.github.io/rowcolr/reference/row_identifiers_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Row Identifiers — row_identifiers_example","title":"Example Row Identifiers — row_identifiers_example","text":"character vector example row identifiers used rowcolr package.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/row_identifiers_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Row Identifiers — row_identifiers_example","text":"","code":"row_identifiers_example"},{"path":"https://coeneisma.github.io/rowcolr/reference/row_identifiers_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Row Identifiers — row_identifiers_example","text":"character vector 23 elements.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/row_identifiers_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Row Identifiers — row_identifiers_example","text":"","code":"row_identifiers_example #>  [1] \"int_fixed_assets_row\"            \"tang_fixed_assets_row\"           #>  [3] \"fin_fixed_assets_row\"            \"tot_fixed_assets_row\"            #>  [5] \"stock_row\"                       \"receivables_row\"                 #>  [7] \"securites_row\"                   \"cash_row\"                        #>  [9] \"tot_cur_assets_row\"              \"tot_assets_row\"                  #> [11] \"gen_reserve_row\"                 \"designated_reserves_row\"         #> [13] \"designated_funds_row\"            \"total_equity_row\"                #> [15] \"purchase_fund_row\"               \"major_maint_row\"                 #> [17] \"other_prov_row\"                  \"tot_prov_row\"                    #> [19] \"long_term_liabilities_row\"       \"total_long_term_liabilities_row\" #> [21] \"cur_liabilities_row\"             \"tot_cur_liabilities_row\"         #> [23] \"total_liabilities_row\""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to an example Excel file — rowcolr_example","title":"Get the path to an example Excel file — rowcolr_example","text":"Retrieves path example example.xlsx file included rowcolr package.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to an example Excel file — rowcolr_example","text":"","code":"rowcolr_example(path = NULL)"},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to an example Excel file — rowcolr_example","text":"path Optional. specific file name within extdata directory. Defaults NULL, lists available files.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to an example Excel file — rowcolr_example","text":"character string file path directory listing.","code":""},{"path":"https://coeneisma.github.io/rowcolr/news/index.html","id":"rowcolr-development-version","dir":"Changelog","previous_headings":"","what":"rowcolr (development version)","title":"rowcolr (development version)","text":"Added main function extract_values() Added documentation examples Added pkgdown website","code":""}]
