[{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"CLAUDE.md","text":"rowcolr R package extracting structured data Excel files identifying row column labels. package designed handle Excel files data organized descriptive labels rows columns, extracts values intersections.","code":""},{"path":[]},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"development-commands","dir":"","previous_headings":"Commands","what":"Development Commands","title":"CLAUDE.md","text":"","code":"# Document the package (update NAMESPACE and man pages) Rscript -e \"devtools::document()\"  # Check the package (full R CMD check) Rscript -e \"devtools::check()\"  # Build the package Rscript -e \"devtools::build()\"  # Install the package locally Rscript -e \"devtools::install()\"  # Build pkgdown site locally Rscript -e \"pkgdown::build_site()\""},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"testing","dir":"","previous_headings":"Commands","what":"Testing","title":"CLAUDE.md","text":"Note: package currently test suite. adding tests, create tests/testthat/ directory use testthat framework.","code":""},{"path":[]},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"core-functionality","dir":"","previous_headings":"Architecture","what":"Core Functionality","title":"CLAUDE.md","text":"package two exported functions: - extract_values(): Main function extracts data Excel files based row/column identifiers patterns - rowcolr_example(): Helper access example files inst/extdata/","code":""},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"key-design-decisions","dir":"","previous_headings":"Architecture","what":"Key Design Decisions","title":"CLAUDE.md","text":"Excel Parsing: Uses tidyxl::xlsx_cells() low-level cell access, preserving Excel metadata Label Matching: Supports explicit identifiers regex patterns finding labels Intersection Algorithm: Uses “closest match” approach - row label, finds nearest column label row Data Structure: Returns tibble original Excel coordinates extracted values","code":""},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"dependencies","dir":"","previous_headings":"Architecture","what":"Dependencies","title":"CLAUDE.md","text":"tidyxl: Excel file parsing dplyr/tidyr/purrr: Data manipulation stringr: String operations regex cli: User-friendly error messages","code":""},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"file-organization","dir":"","previous_headings":"Architecture","what":"File Organization","title":"CLAUDE.md","text":"","code":"R/ ├── extract_values.R    # Main extraction logic └── rowcolr_example.R   # Example file helper  inst/ └── extdata/           # Example Excel files  vignettes/             # Package documentation man/                   # Generated documentation"},{"path":"https://coeneisma.github.io/rowcolr/CLAUDE.html","id":"important-context","dir":"","previous_headings":"","what":"Important Context","title":"CLAUDE.md","text":"Package follows tidyverse conventions (pipe operator, tibble output) user-facing messages use cli consistency package marked “experimental” lifecycle Originally developed Dutch government (OCW) use case","code":""},{"path":"https://coeneisma.github.io/rowcolr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 rowcolr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"rowcolr","text":"function rowcolr extract_values(), extracts structured data Excel files identifying row column labels. function works drawing horizontal line detected row label vertical line detected column label. value intersection extracted stored. function provides flexibility allowing explicit identifiers regex patterns: explicit identifiers (row_identifiers col_identifiers) provided, take priority regex. regex patterns (row_pattern, col_pattern) provided, act fallback explicit identifiers exhaustive. package can loaded :","code":"library(rowcolr)"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"extracting-data-from-an-excel-file-using-specific-row-and-column-identifiers","dir":"Articles","previous_headings":"Usage","what":"Extracting Data from an Excel File using specific row and column identifiers","title":"rowcolr","text":"predefined row column labels, can use directly providing character vectors col_identifiers row_identifiers arguments:","code":"row_identifiers_example <- c(\"int_fixed_assets_row\", \"tang_fixed_assets_row\",                              \"fin_fixed_assets_row\", \"tot_fixed_assets_row\") col_identifiers_example <- \"2025_col\"  dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            row_identifiers = row_identifiers_example,                           col_identifiers = col_identifiers_example)  head(dataset |> dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 4 × 9 #>   row_label             col_label description    data_type error logical numeric #>   <chr>                 <chr>     <chr>          <chr>     <chr> <lgl>     <dbl> #> 1 int_fixed_assets_row  2025_col  int_fixed_ass… numeric   NA    NA       100000 #> 2 tang_fixed_assets_row 2025_col  tang_fixed_as… numeric   NA    NA       200000 #> 3 fin_fixed_assets_row  2025_col  fin_fixed_ass… numeric   NA    NA       150000 #> 4 tot_fixed_assets_row  2025_col  tot_fixed_ass… numeric   NA    NA       450000 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"extracting-data-from-an-excel-file-using-regex-patterns","dir":"Articles","previous_headings":"Usage","what":"Extracting Data from an Excel File using regex patterns","title":"rowcolr","text":"Values can extracted Excel file using regex patterns:","code":"# Extract values using regex patterns dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            row_pattern = \".*_row$\",                            col_pattern = \".*_col$\")  head(dataset |> dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label            col_label description data_type error logical  numeric #>   <chr>                <chr>     <chr>       <chr>     <chr> <lgl>      <dbl> #> 1 name_row             value_col _           character NA    NA            NA #> 2 year_row             value_col _           numeric   NA    NA          2025 #> 3 kvk_row              value_col _           numeric   NA    NA      12345678 #> 4 test1_row            2026_col  _           character NA    NA            NA #> 5 tes2_row             2026_col  _           character NA    NA            NA #> 6 int_fixed_assets_row 2025_col  _           numeric   NA    NA        100000 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"extracting-data-from-an-excel-file-using-both-identifiers-and-regex-patterns","dir":"Articles","previous_headings":"Usage","what":"Extracting Data from an Excel File using both identifiers and regex patterns","title":"rowcolr","text":"can combine use predefined row column labels regex patterns:","code":"dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            row_identifiers = row_identifiers_example,                           col_identifiers = col_identifiers_example,                           row_pattern = \".*_row$\",                            col_pattern = \".*_col$\")"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"no-regex-pattern-or-identifiers","dir":"Articles","previous_headings":"Usage","what":"No regex pattern or identifiers","title":"rowcolr","text":"identifiers regex provided, extract_values() return error:","code":"dataset <- extract_values(rowcolr_example(\"example.xlsx\"))  #> Error: No identifiers or regex patterns provided. Please specify  #> `row_identifiers`, `col_identifiers`, `row_pattern`, or `col_pattern`."},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"controlling-description-cleaning","dir":"Articles","previous_headings":"Usage","what":"Controlling Description Cleaning","title":"rowcolr","text":"default, row column labels cleaned removing row column patterns combining description. disable , use clean_description = FALSE:","code":"dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            row_pattern = \".*_row$\",                            col_pattern = \".*_col$\",                           clean_description = FALSE)  head(dataset |>         dplyr::select(c(row_label, col_label, description))) #> # A tibble: 6 × 3 #>   row_label            col_label description                   #>   <chr>                <chr>     <chr>                         #> 1 name_row             value_col name_row_value_col            #> 2 year_row             value_col year_row_value_col            #> 3 kvk_row              value_col kvk_row_value_col             #> 4 test1_row            2026_col  test1_row_2026_col            #> 5 tes2_row             2026_col  tes2_row_2026_col             #> 6 int_fixed_assets_row 2025_col  int_fixed_assets_row_2025_col"},{"path":"https://coeneisma.github.io/rowcolr/articles/rowcolr.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"rowcolr","text":"rowcolr package powerful tool extracting structured data Excel files based customizable row column patterns. designed flexible, allowing regex-based matching predefined lists identifiers.","code":""},{"path":"https://coeneisma.github.io/rowcolr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Coen Eisma. Author, maintainer.","code":""},{"path":"https://coeneisma.github.io/rowcolr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Eisma C (2025). rowcolr: Extract Structured Data Excel Using Row Column Identifiers. R package version 0.0.0.9004, https://coeneisma.github.io/rowcolr/.","code":"@Manual{,   title = {rowcolr: Extract Structured Data from Excel Using Row and Column Identifiers},   author = {Coen Eisma},   year = {2025},   note = {R package version 0.0.0.9004},   url = {https://coeneisma.github.io/rowcolr/}, }"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"rowcolr","dir":"","previous_headings":"","what":"Extract Structured Data from Excel Using Row and Column Identifiers","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"goal rowcolr extract structured data semi-structured Excel files identifying row column labels using predefined identifiers regex patterns. Processing data can challenging existing packages. rowcolr simplifies process efficiently locating values intersection row column labels, making data wrangling cleaning seamless. Built powerful tidyxl package, rowcolr ensures robust reliable extraction cell contents Excel files.","code":""},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"origin","dir":"","previous_headings":"","what":"Origin","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"development rowcolr driven specific use case: existing Excel files used input forms organizations arts culture sector provide information Dutch Ministry Education, Culture, Science (OCW). minimize disruptions existing workflow, forms kept similar possible original format still allowing structured extraction relevant data Excel files.","code":""},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"can install development version rowcolr GitHub :","code":"devtools::install_github(\"coeneisma/rowcolr\")"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"primary function rowcolr extract_values(), allows extract structured data Excel files identifying row column labels. function works drawing horizontal line detected row label vertical line detected column label. value located intersection extracted stored. package can loaded :","code":"library(rowcolr)"},{"path":"https://coeneisma.github.io/rowcolr/index.html","id":"example-extracting-data-from-an-excel-file","dir":"","previous_headings":"Usage","what":"Example: Extracting Data from an Excel File","title":"Extract Structured Data from Excel Using Row and Column Identifiers","text":"Values can extracted Excel file using row column identifiers regex patterns: details using package, refer vignette: vignette(\"rowcolr\").","code":"# Extract values from an example Excel file with regex patterns dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                            row_pattern = \".*_row$\",                            col_pattern = \".*_col$\")  head(dataset |> dplyr::select(-c(filename, sheet, row, col))) #> # A tibble: 6 × 9 #>   row_label            col_label description data_type error logical  numeric #>   <chr>                <chr>     <chr>       <chr>     <chr> <lgl>      <dbl> #> 1 name_row             value_col _           character <NA>  NA            NA #> 2 year_row             value_col _           numeric   <NA>  NA          2025 #> 3 kvk_row              value_col _           numeric   <NA>  NA      12345678 #> 4 test1_row            2026_col  _           character <NA>  NA            NA #> 5 tes2_row             2026_col  _           character <NA>  NA            NA #> 6 int_fixed_assets_row 2025_col  _           numeric   <NA>  NA        100000 #> # ℹ 2 more variables: date <dttm>, character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/reference/apply_fuzzy_matching.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply fuzzy matching to a vector of strings against identifiers — apply_fuzzy_matching","title":"Apply fuzzy matching to a vector of strings against identifiers — apply_fuzzy_matching","text":"Apply fuzzy matching vector strings identifiers","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/apply_fuzzy_matching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply fuzzy matching to a vector of strings against identifiers — apply_fuzzy_matching","text":"","code":"apply_fuzzy_matching(   strings,   identifiers,   threshold = 0.8,   method = \"jw\",   return_scores = FALSE )"},{"path":"https://coeneisma.github.io/rowcolr/reference/apply_fuzzy_matching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply fuzzy matching to a vector of strings against identifiers — apply_fuzzy_matching","text":"strings Character vector check matches identifiers Character vector identifiers match threshold Numeric 0 1. Minimum similarity score method Character. String distance method return_scores Logical. TRUE, returns best similarity scores","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/apply_fuzzy_matching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply fuzzy matching to a vector of strings against identifiers — apply_fuzzy_matching","text":"Logical vector indicating matches, numeric vector best scores","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"function reads Excel file extracts structured data identifying row column labels. ensures row label matched closest column label right column labels nearest preceding row contains column headers. can use regex patterns explicit identifiers together. row_identifiers /col_identifiers provided, take priority row_pattern col_pattern. explicit identifiers regex patterns provided, function first match identifiers. additional matches regex patterns included.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"","code":"extract_values(   file,   row_pattern = NULL,   col_pattern = NULL,   row_identifiers = NULL,   col_identifiers = NULL,   clean_description = TRUE,   fuzzy_threshold = NULL,   fuzzy_method = \"jw\",   sheets = NULL )"},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"file Path Excel file. row_pattern regex pattern identify row labels. Used row_identifiers fully capture row labels. (Example: \".*_row$\"). col_pattern regex pattern identify column labels. Used col_identifiers fully capture column labels. (Example: \".*_col$\"). row_identifiers character vector row label identifiers. provided, takes precedence row_pattern, disable . col_identifiers character vector column label identifiers. provided, takes precedence col_pattern, disable . clean_description Logical. TRUE, removes text matching row_pattern col_pattern row column labels (default: TRUE). fuzzy_threshold Numeric 0 1. set, enables fuzzy matching identifiers. 0 = exact match required, 1 = match accepted. Recommended: 0.8 (default: NULL, disabled). fuzzy_method Character. Method fuzzy matching stringdist package: \"osa\", \"lv\", \"dl\", \"jaccard\", \"jw\" (default: \"jw\" Jaro-Winkler). sheets Character vector sheet names numeric indices process. NULL processes sheets (default: NULL).","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"tibble containing extracted values following columns: filename: Name source Excel file sheet: Sheet name value found row, col: Row column coordinates value row_label, col_label: matched row column labels description: Combined row column label data_type: Excel data type cell error, logical, numeric, date, character: Cell values type fuzzy_threshold: fuzzy matching threshold used () row_similarity: Similarity score row label match (0-1) col_similarity: Similarity score column label match (0-1)","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/extract_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Values from an Excel File Based on Row and Column Identifiers — extract_values","text":"","code":"# Extract values using regex patterns dataset <- extract_values(rowcolr_example(\"example.xlsx\"), row_pattern = \".*_row$\", col_pattern = \".*_col$\") dataset #> # A tibble: 28 × 13 #>    filename    sheet   row   col row_label col_label description data_type error #>    <chr>       <chr> <int> <int> <chr>     <chr>     <chr>       <chr>     <chr> #>  1 example.xl… Bala…     2     4 name_row  value_col _           character NA    #>  2 example.xl… Bala…     3     4 year_row  value_col _           numeric   NA    #>  3 example.xl… Bala…     4     4 kvk_row   value_col _           numeric   NA    #>  4 example.xl… Bala…     7    10 test1_row 2026_col  _           character NA    #>  5 example.xl… Bala…     8    10 tes2_row  2026_col  _           character NA    #>  6 example.xl… Bala…     9     4 int_fixe… 2025_col  _           numeric   NA    #>  7 example.xl… Bala…    10     4 tang_fix… 2025_col  _           numeric   NA    #>  8 example.xl… Bala…    11     4 fin_fixe… 2025_col  _           numeric   NA    #>  9 example.xl… Bala…    13     4 tot_fixe… 2025_col  _           numeric   NA    #> 10 example.xl… Bala…    16     4 stock_row 2025_col  _           numeric   NA    #> # ℹ 18 more rows #> # ℹ 4 more variables: logical <lgl>, numeric <dbl>, date <dttm>, #> #   character <chr>  # Extract values using a predefined list of labels (ignoring regex) dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                           row_identifiers = c(\"Total assets (4+9)\", \"Total equity (10+11+12)\"),                           col_identifiers = c(\"2025_col\")) dataset #> # A tibble: 2 × 13 #>   filename     sheet   row   col row_label col_label description data_type error #>   <chr>        <chr> <int> <int> <chr>     <chr>     <chr>       <chr>     <chr> #> 1 example.xlsx Bala…    23     4 Total as… 2025_col  Total asse… numeric   NA    #> 2 example.xlsx Bala…    31     4 Total eq… 2025_col  Total equi… numeric   NA    #> # ℹ 4 more variables: logical <lgl>, numeric <dbl>, date <dttm>, #> #   character <chr>  # Extract values using BOTH identifiers and regex dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                           row_identifiers = c(\"Total assets (4+9)\"),                           row_pattern = \".*_row$\") #> Warning: There were 29 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `closest_col_row = purrr::map_dbl(row, #>   ~max(cols$col_row[cols$col_row < .x], na.rm = TRUE))`. #> ℹ In group 1: `sheet_rows = \"Balance\"`. #> Caused by warning in `max()`: #> ! no non-missing arguments to max; returning -Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 28 remaining warnings. #> Warning: No data extracted. Check your identifiers/patterns. dataset #> # A tibble: 0 × 13 #> # ℹ 13 variables: filename <chr>, sheet <chr>, row <int>, col <int>, #> #   row_label <chr>, col_label <chr>, description <chr>, data_type <chr>, #> #   error <chr>, logical <lgl>, numeric <dbl>, date <dttm>, character <chr>  # Extract values with fuzzy matching enabled dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                           row_identifiers = c(\"Total assets\", \"Total equity\"),                           col_identifiers = c(\"2025\"),                           fuzzy_threshold = 0.8) #> ℹ Fuzzy matching enabled with threshold 0.8 #> ℹ Found 2 row labels and 1 column label dataset #> # A tibble: 2 × 16 #>   filename     sheet   row   col row_label col_label description data_type error #>   <chr>        <chr> <int> <int> <chr>     <chr>     <chr>       <chr>     <chr> #> 1 example.xlsx Bala…    23     4 Total as… 2025_col  Total asse… numeric   NA    #> 2 example.xlsx Bala…    31     4 Total eq… 2025_col  Total equi… numeric   NA    #> # ℹ 7 more variables: logical <lgl>, numeric <dbl>, date <dttm>, #> #   character <chr>, fuzzy_threshold <dbl>, row_similarity <dbl>, #> #   col_similarity <dbl>  # Extract values from specific sheets only dataset <- extract_values(rowcolr_example(\"example.xlsx\"),                           row_pattern = \".*_row$\", col_pattern = \".*_col$\",                           sheets = c(\"Balance\")) #> Processing 1 sheet: \"Balance\" dataset #> # A tibble: 28 × 13 #>    filename    sheet   row   col row_label col_label description data_type error #>    <chr>       <chr> <int> <int> <chr>     <chr>     <chr>       <chr>     <chr> #>  1 example.xl… Bala…     2     4 name_row  value_col _           character NA    #>  2 example.xl… Bala…     3     4 year_row  value_col _           numeric   NA    #>  3 example.xl… Bala…     4     4 kvk_row   value_col _           numeric   NA    #>  4 example.xl… Bala…     7    10 test1_row 2026_col  _           character NA    #>  5 example.xl… Bala…     8    10 tes2_row  2026_col  _           character NA    #>  6 example.xl… Bala…     9     4 int_fixe… 2025_col  _           numeric   NA    #>  7 example.xl… Bala…    10     4 tang_fix… 2025_col  _           numeric   NA    #>  8 example.xl… Bala…    11     4 fin_fixe… 2025_col  _           numeric   NA    #>  9 example.xl… Bala…    13     4 tot_fixe… 2025_col  _           numeric   NA    #> 10 example.xl… Bala…    16     4 stock_row 2025_col  _           numeric   NA    #> # ℹ 18 more rows #> # ℹ 4 more variables: logical <lgl>, numeric <dbl>, date <dttm>, #> #   character <chr>"},{"path":"https://coeneisma.github.io/rowcolr/reference/find_fuzzy_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Find fuzzy matches for a target string in a vector of candidates — find_fuzzy_matches","title":"Find fuzzy matches for a target string in a vector of candidates — find_fuzzy_matches","text":"Find fuzzy matches target string vector candidates","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/find_fuzzy_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find fuzzy matches for a target string in a vector of candidates — find_fuzzy_matches","text":"","code":"find_fuzzy_matches(   target,   candidates,   threshold = 0.8,   method = \"jw\",   return_scores = FALSE )"},{"path":"https://coeneisma.github.io/rowcolr/reference/find_fuzzy_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find fuzzy matches for a target string in a vector of candidates — find_fuzzy_matches","text":"target Character string match candidates Character vector potential matches threshold Numeric 0 1. Minimum similarity score required method Character. String distance method stringdist package return_scores Logical. TRUE, returns similarity scores instead logical vector","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/find_fuzzy_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find fuzzy matches for a target string in a vector of candidates — find_fuzzy_matches","text":"Logical vector indicating candidates match, numeric vector scores","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to an example Excel file — rowcolr_example","title":"Get the path to an example Excel file — rowcolr_example","text":"Retrieves path example example.xlsx file included rowcolr package.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to an example Excel file — rowcolr_example","text":"","code":"rowcolr_example(path = NULL)"},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the path to an example Excel file — rowcolr_example","text":"path Optional. specific file name within extdata directory. Defaults NULL, lists available files.","code":""},{"path":"https://coeneisma.github.io/rowcolr/reference/rowcolr_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to an example Excel file — rowcolr_example","text":"character string file path directory listing.","code":""},{"path":"https://coeneisma.github.io/rowcolr/news/index.html","id":"rowcolr-development-version","dir":"Changelog","previous_headings":"","what":"rowcolr (development version)","title":"rowcolr (development version)","text":"Added main function extract_values() Added documentation examples Added pkgdown website","code":""}]
